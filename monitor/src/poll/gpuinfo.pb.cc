// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpuinfo.proto

#include "gpuinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gpuinfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gpuinfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GPU;
}  // namespace protobuf_gpuinfo_2eproto
namespace wjp {
class GPUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GPU>
      _instance;
} _GPU_default_instance_;
class GPUsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GPUs>
      _instance;
} _GPUs_default_instance_;
}  // namespace wjp
namespace protobuf_gpuinfo_2eproto {
static void InitDefaultsGPU() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wjp::_GPU_default_instance_;
    new (ptr) ::wjp::GPU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wjp::GPU::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GPU =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGPU}, {}};

static void InitDefaultsGPUs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wjp::_GPUs_default_instance_;
    new (ptr) ::wjp::GPUs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wjp::GPUs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GPUs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGPUs}, {
      &protobuf_gpuinfo_2eproto::scc_info_GPU.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GPU.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GPUs.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPU, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPU, bus_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPU, util_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPU, memory_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPU, power_percent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPUs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::wjp::GPUs, gpus_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wjp::GPU)},
  { 10, -1, sizeof(::wjp::GPUs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::wjp::_GPU_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::wjp::_GPUs_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gpuinfo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rgpuinfo.proto\022\003wjp\"h\n\003GPU\022\014\n\004name\030\001 \001("
      "\t\022\016\n\006bus_id\030\002 \001(\t\022\024\n\014util_percent\030\003 \001(\005\022"
      "\026\n\016memory_percent\030\004 \001(\005\022\025\n\rpower_percent"
      "\030\005 \001(\005\"\036\n\004GPUs\022\026\n\004gpus\030\001 \003(\0132\010.wjp.GPUB\002"
      "H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gpuinfo.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gpuinfo_2eproto
namespace wjp {

// ===================================================================

void GPU::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPU::kNameFieldNumber;
const int GPU::kBusIdFieldNumber;
const int GPU::kUtilPercentFieldNumber;
const int GPU::kMemoryPercentFieldNumber;
const int GPU::kPowerPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPU::GPU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gpuinfo_2eproto::scc_info_GPU.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:wjp.GPU)
}
GPU::GPU(const GPU& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  bus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bus_id().size() > 0) {
    bus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bus_id_);
  }
  ::memcpy(&util_percent_, &from.util_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_percent_) -
    reinterpret_cast<char*>(&util_percent_)) + sizeof(power_percent_));
  // @@protoc_insertion_point(copy_constructor:wjp.GPU)
}

void GPU::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&util_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_percent_) -
      reinterpret_cast<char*>(&util_percent_)) + sizeof(power_percent_));
}

GPU::~GPU() {
  // @@protoc_insertion_point(destructor:wjp.GPU)
  SharedDtor();
}

void GPU::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bus_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GPU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GPU::descriptor() {
  ::protobuf_gpuinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gpuinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GPU& GPU::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gpuinfo_2eproto::scc_info_GPU.base);
  return *internal_default_instance();
}


void GPU::Clear() {
// @@protoc_insertion_point(message_clear_start:wjp.GPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bus_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&util_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_percent_) -
      reinterpret_cast<char*>(&util_percent_)) + sizeof(power_percent_));
  _internal_metadata_.Clear();
}

bool GPU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wjp.GPU)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wjp.GPU.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bus_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bus_id().data(), static_cast<int>(this->bus_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "wjp.GPU.bus_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 util_percent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &util_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memory_percent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 power_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wjp.GPU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wjp.GPU)
  return false;
#undef DO_
}

void GPU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wjp.GPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wjp.GPU.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string bus_id = 2;
  if (this->bus_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bus_id().data(), static_cast<int>(this->bus_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wjp.GPU.bus_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bus_id(), output);
  }

  // int32 util_percent = 3;
  if (this->util_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->util_percent(), output);
  }

  // int32 memory_percent = 4;
  if (this->memory_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->memory_percent(), output);
  }

  // int32 power_percent = 5;
  if (this->power_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power_percent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:wjp.GPU)
}

::google::protobuf::uint8* GPU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:wjp.GPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wjp.GPU.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string bus_id = 2;
  if (this->bus_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bus_id().data(), static_cast<int>(this->bus_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "wjp.GPU.bus_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bus_id(), target);
  }

  // int32 util_percent = 3;
  if (this->util_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->util_percent(), target);
  }

  // int32 memory_percent = 4;
  if (this->memory_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->memory_percent(), target);
  }

  // int32 power_percent = 5;
  if (this->power_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power_percent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wjp.GPU)
  return target;
}

size_t GPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wjp.GPU)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string bus_id = 2;
  if (this->bus_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bus_id());
  }

  // int32 util_percent = 3;
  if (this->util_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->util_percent());
  }

  // int32 memory_percent = 4;
  if (this->memory_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memory_percent());
  }

  // int32 power_percent = 5;
  if (this->power_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->power_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wjp.GPU)
  GOOGLE_DCHECK_NE(&from, this);
  const GPU* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wjp.GPU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wjp.GPU)
    MergeFrom(*source);
  }
}

void GPU::MergeFrom(const GPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wjp.GPU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.bus_id().size() > 0) {

    bus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bus_id_);
  }
  if (from.util_percent() != 0) {
    set_util_percent(from.util_percent());
  }
  if (from.memory_percent() != 0) {
    set_memory_percent(from.memory_percent());
  }
  if (from.power_percent() != 0) {
    set_power_percent(from.power_percent());
  }
}

void GPU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wjp.GPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPU::CopyFrom(const GPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wjp.GPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPU::IsInitialized() const {
  return true;
}

void GPU::Swap(GPU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPU::InternalSwap(GPU* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bus_id_.Swap(&other->bus_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(util_percent_, other->util_percent_);
  swap(memory_percent_, other->memory_percent_);
  swap(power_percent_, other->power_percent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GPU::GetMetadata() const {
  protobuf_gpuinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gpuinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GPUs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPUs::kGpusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPUs::GPUs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gpuinfo_2eproto::scc_info_GPUs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:wjp.GPUs)
}
GPUs::GPUs(const GPUs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gpus_(from.gpus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wjp.GPUs)
}

void GPUs::SharedCtor() {
}

GPUs::~GPUs() {
  // @@protoc_insertion_point(destructor:wjp.GPUs)
  SharedDtor();
}

void GPUs::SharedDtor() {
}

void GPUs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GPUs::descriptor() {
  ::protobuf_gpuinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gpuinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GPUs& GPUs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gpuinfo_2eproto::scc_info_GPUs.base);
  return *internal_default_instance();
}


void GPUs::Clear() {
// @@protoc_insertion_point(message_clear_start:wjp.GPUs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpus_.Clear();
  _internal_metadata_.Clear();
}

bool GPUs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wjp.GPUs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .wjp.GPU gpus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gpus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wjp.GPUs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wjp.GPUs)
  return false;
#undef DO_
}

void GPUs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wjp.GPUs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .wjp.GPU gpus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gpus_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gpus(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:wjp.GPUs)
}

::google::protobuf::uint8* GPUs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:wjp.GPUs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .wjp.GPU gpus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gpus_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gpus(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wjp.GPUs)
  return target;
}

size_t GPUs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wjp.GPUs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .wjp.GPU gpus = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gpus_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gpus(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wjp.GPUs)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPUs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wjp.GPUs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wjp.GPUs)
    MergeFrom(*source);
  }
}

void GPUs::MergeFrom(const GPUs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wjp.GPUs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpus_.MergeFrom(from.gpus_);
}

void GPUs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wjp.GPUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUs::CopyFrom(const GPUs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wjp.GPUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUs::IsInitialized() const {
  return true;
}

void GPUs::Swap(GPUs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPUs::InternalSwap(GPUs* other) {
  using std::swap;
  CastToBase(&gpus_)->InternalSwap(CastToBase(&other->gpus_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GPUs::GetMetadata() const {
  protobuf_gpuinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gpuinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wjp
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::wjp::GPU* Arena::CreateMaybeMessage< ::wjp::GPU >(Arena* arena) {
  return Arena::CreateInternal< ::wjp::GPU >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::wjp::GPUs* Arena::CreateMaybeMessage< ::wjp::GPUs >(Arena* arena) {
  return Arena::CreateInternal< ::wjp::GPUs >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
