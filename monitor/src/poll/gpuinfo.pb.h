// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpuinfo.proto

#ifndef PROTOBUF_INCLUDED_gpuinfo_2eproto
#define PROTOBUF_INCLUDED_gpuinfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gpuinfo_2eproto 

namespace protobuf_gpuinfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gpuinfo_2eproto
namespace wjp {
class GPU;
class GPUDefaultTypeInternal;
extern GPUDefaultTypeInternal _GPU_default_instance_;
class GPUs;
class GPUsDefaultTypeInternal;
extern GPUsDefaultTypeInternal _GPUs_default_instance_;
}  // namespace wjp
namespace google {
namespace protobuf {
template<> ::wjp::GPU* Arena::CreateMaybeMessage<::wjp::GPU>(Arena*);
template<> ::wjp::GPUs* Arena::CreateMaybeMessage<::wjp::GPUs>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace wjp {

// ===================================================================

class GPU : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wjp.GPU) */ {
 public:
  GPU();
  virtual ~GPU();

  GPU(const GPU& from);

  inline GPU& operator=(const GPU& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GPU(GPU&& from) noexcept
    : GPU() {
    *this = ::std::move(from);
  }

  inline GPU& operator=(GPU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPU* internal_default_instance() {
    return reinterpret_cast<const GPU*>(
               &_GPU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GPU* other);
  friend void swap(GPU& a, GPU& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPU* New() const final {
    return CreateMaybeMessage<GPU>(NULL);
  }

  GPU* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GPU>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GPU& from);
  void MergeFrom(const GPU& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string bus_id = 2;
  void clear_bus_id();
  static const int kBusIdFieldNumber = 2;
  const ::std::string& bus_id() const;
  void set_bus_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bus_id(::std::string&& value);
  #endif
  void set_bus_id(const char* value);
  void set_bus_id(const char* value, size_t size);
  ::std::string* mutable_bus_id();
  ::std::string* release_bus_id();
  void set_allocated_bus_id(::std::string* bus_id);

  // int32 util_percent = 3;
  void clear_util_percent();
  static const int kUtilPercentFieldNumber = 3;
  ::google::protobuf::int32 util_percent() const;
  void set_util_percent(::google::protobuf::int32 value);

  // int32 memory_percent = 4;
  void clear_memory_percent();
  static const int kMemoryPercentFieldNumber = 4;
  ::google::protobuf::int32 memory_percent() const;
  void set_memory_percent(::google::protobuf::int32 value);

  // int32 power_percent = 5;
  void clear_power_percent();
  static const int kPowerPercentFieldNumber = 5;
  ::google::protobuf::int32 power_percent() const;
  void set_power_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wjp.GPU)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr bus_id_;
  ::google::protobuf::int32 util_percent_;
  ::google::protobuf::int32 memory_percent_;
  ::google::protobuf::int32 power_percent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gpuinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GPUs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wjp.GPUs) */ {
 public:
  GPUs();
  virtual ~GPUs();

  GPUs(const GPUs& from);

  inline GPUs& operator=(const GPUs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GPUs(GPUs&& from) noexcept
    : GPUs() {
    *this = ::std::move(from);
  }

  inline GPUs& operator=(GPUs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPUs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUs* internal_default_instance() {
    return reinterpret_cast<const GPUs*>(
               &_GPUs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GPUs* other);
  friend void swap(GPUs& a, GPUs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPUs* New() const final {
    return CreateMaybeMessage<GPUs>(NULL);
  }

  GPUs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GPUs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GPUs& from);
  void MergeFrom(const GPUs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .wjp.GPU gpus = 1;
  int gpus_size() const;
  void clear_gpus();
  static const int kGpusFieldNumber = 1;
  ::wjp::GPU* mutable_gpus(int index);
  ::google::protobuf::RepeatedPtrField< ::wjp::GPU >*
      mutable_gpus();
  const ::wjp::GPU& gpus(int index) const;
  ::wjp::GPU* add_gpus();
  const ::google::protobuf::RepeatedPtrField< ::wjp::GPU >&
      gpus() const;

  // @@protoc_insertion_point(class_scope:wjp.GPUs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::wjp::GPU > gpus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gpuinfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GPU

// string name = 1;
inline void GPU::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GPU::name() const {
  // @@protoc_insertion_point(field_get:wjp.GPU.name)
  return name_.GetNoArena();
}
inline void GPU::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wjp.GPU.name)
}
#if LANG_CXX11
inline void GPU::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wjp.GPU.name)
}
#endif
inline void GPU::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wjp.GPU.name)
}
inline void GPU::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wjp.GPU.name)
}
inline ::std::string* GPU::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:wjp.GPU.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GPU::release_name() {
  // @@protoc_insertion_point(field_release:wjp.GPU.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GPU::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:wjp.GPU.name)
}

// string bus_id = 2;
inline void GPU::clear_bus_id() {
  bus_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GPU::bus_id() const {
  // @@protoc_insertion_point(field_get:wjp.GPU.bus_id)
  return bus_id_.GetNoArena();
}
inline void GPU::set_bus_id(const ::std::string& value) {
  
  bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wjp.GPU.bus_id)
}
#if LANG_CXX11
inline void GPU::set_bus_id(::std::string&& value) {
  
  bus_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wjp.GPU.bus_id)
}
#endif
inline void GPU::set_bus_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wjp.GPU.bus_id)
}
inline void GPU::set_bus_id(const char* value, size_t size) {
  
  bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wjp.GPU.bus_id)
}
inline ::std::string* GPU::mutable_bus_id() {
  
  // @@protoc_insertion_point(field_mutable:wjp.GPU.bus_id)
  return bus_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GPU::release_bus_id() {
  // @@protoc_insertion_point(field_release:wjp.GPU.bus_id)
  
  return bus_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GPU::set_allocated_bus_id(::std::string* bus_id) {
  if (bus_id != NULL) {
    
  } else {
    
  }
  bus_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bus_id);
  // @@protoc_insertion_point(field_set_allocated:wjp.GPU.bus_id)
}

// int32 util_percent = 3;
inline void GPU::clear_util_percent() {
  util_percent_ = 0;
}
inline ::google::protobuf::int32 GPU::util_percent() const {
  // @@protoc_insertion_point(field_get:wjp.GPU.util_percent)
  return util_percent_;
}
inline void GPU::set_util_percent(::google::protobuf::int32 value) {
  
  util_percent_ = value;
  // @@protoc_insertion_point(field_set:wjp.GPU.util_percent)
}

// int32 memory_percent = 4;
inline void GPU::clear_memory_percent() {
  memory_percent_ = 0;
}
inline ::google::protobuf::int32 GPU::memory_percent() const {
  // @@protoc_insertion_point(field_get:wjp.GPU.memory_percent)
  return memory_percent_;
}
inline void GPU::set_memory_percent(::google::protobuf::int32 value) {
  
  memory_percent_ = value;
  // @@protoc_insertion_point(field_set:wjp.GPU.memory_percent)
}

// int32 power_percent = 5;
inline void GPU::clear_power_percent() {
  power_percent_ = 0;
}
inline ::google::protobuf::int32 GPU::power_percent() const {
  // @@protoc_insertion_point(field_get:wjp.GPU.power_percent)
  return power_percent_;
}
inline void GPU::set_power_percent(::google::protobuf::int32 value) {
  
  power_percent_ = value;
  // @@protoc_insertion_point(field_set:wjp.GPU.power_percent)
}

// -------------------------------------------------------------------

// GPUs

// repeated .wjp.GPU gpus = 1;
inline int GPUs::gpus_size() const {
  return gpus_.size();
}
inline void GPUs::clear_gpus() {
  gpus_.Clear();
}
inline ::wjp::GPU* GPUs::mutable_gpus(int index) {
  // @@protoc_insertion_point(field_mutable:wjp.GPUs.gpus)
  return gpus_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wjp::GPU >*
GPUs::mutable_gpus() {
  // @@protoc_insertion_point(field_mutable_list:wjp.GPUs.gpus)
  return &gpus_;
}
inline const ::wjp::GPU& GPUs::gpus(int index) const {
  // @@protoc_insertion_point(field_get:wjp.GPUs.gpus)
  return gpus_.Get(index);
}
inline ::wjp::GPU* GPUs::add_gpus() {
  // @@protoc_insertion_point(field_add:wjp.GPUs.gpus)
  return gpus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wjp::GPU >&
GPUs::gpus() const {
  // @@protoc_insertion_point(field_list:wjp.GPUs.gpus)
  return gpus_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wjp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gpuinfo_2eproto
